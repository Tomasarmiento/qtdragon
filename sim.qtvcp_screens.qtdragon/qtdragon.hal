# Generated by PNCconf at Sat Sep 10 10:10:56 2016
# If you make changes to this file, they will be
# overwritten when you run PNCconf again

# Component instantiation
#***********************************************************************************
loadrt [KINS]KINEMATICS
#autoconverted  trivkins
loadrt [EMCMOT]EMCMOT servo_period_nsec=[EMCMOT]SERVO_PERIOD num_joints=[KINS]JOINTS num_dio=64
#loadusr -W lcec_conf ethercat-conf.xml
#loadrt lcec
loadrt jolCoenet names=coenet
#loadrt not count=2 names=not.0,not.1
loadrt not count=2
loadrt or2 count=1
loadrt and2 count=3
#loadrt jolIoenet names=ioenet
loadrt pid names=x-posCtrl,y-posCtrl,z-posCtrl debug=0
loadrt time

# Loading of component functions to servo thread
#***********************************************************************************
#addf lcec.read-all          servo-thread
addf coenet.read-all        servo-thread
#addf ioenet.read-all        servo-thread
addf motion-command-handler servo-thread
addf motion-controller      servo-thread
addf x-posCtrl.do-pid-calcs servo-thread
addf y-posCtrl.do-pid-calcs servo-thread
addf z-posCtrl.do-pid-calcs servo-thread
addf coenet.write-all       servo-thread
addf not.0                  servo-thread
addf not.1                  servo-thread
addf or2.0                  servo-thread
addf and2.0                 servo-thread
addf and2.1                 servo-thread
addf and2.2                 servo-thread
addf time.0                 servo-thread

#addf ioenet.write-all       servo-thread
#addf lcec.write-all         servo-thread


# Motion management
################################################################################
setp motion.homing-inhibit 1

#setp coenet.DeviceMapping 1

net emcEnabled <= coenet.EmcEnabled
net emcEnabled => iocontrol.0.emc-enable-in

net cncMotionEnabled <= motion.motion-enabled
net cncMotionEnabled => coenet.EnableCmd

net coenetMotionDropped <= coenet.MotionDropped
net coenetMotionDropped => motion.enable

net posMode => coenet.PositionMode
net resetFaults => coenet.ResetFaults

net gcodeVelocity motion.requested-vel

# Joints
################################################################################

# x joint connections
#===========================================================
net x-enable <= joint.0.amp-enable-out
net x-posCmd <= joint.0.motor-pos-cmd
net x-velCmd <= joint.0.vel-cmd
net x-posFbk => joint.0.motor-pos-fb

net x-driveFault => joint.0.amp-fault-in

net x-negativeLimitSwitch => joint.0.neg-lim-sw-in
net x-positiveLimitSwitch => joint.0.pos-lim-sw-in
net x-homeSwitch => joint.0.home-sw-in

# y joint connections
#===========================================================
net y-enable <= joint.1.amp-enable-out
net y-posCmd <= joint.1.motor-pos-cmd
net y-velCmd <= joint.1.vel-cmd
net y-posFbk => joint.1.motor-pos-fb

net y-driveFault => joint.1.amp-fault-in

net y-negativeLimitSwitch => joint.1.neg-lim-sw-in
net y-positiveLimitSwitch => joint.1.pos-lim-sw-in
net y-homeSwitch => joint.1.home-sw-in

# z joint connections
#===========================================================
net z-enable <= joint.2.amp-enable-out
net z-posCmd <= joint.2.motor-pos-cmd
net z-velCmd <= joint.2.vel-cmd
net z-posFbk => joint.2.motor-pos-fb

net z-driveFault => joint.2.amp-fault-in

net z-negativeLimitSwitch => joint.2.neg-lim-sw-in
net z-positiveLimitSwitch => joint.2.pos-lim-sw-in
net z-homeSwitch => joint.2.home-sw-in


# Position control (PIDs)
################################################################################
net posCtrlEnable => x-posCtrl.enable
net posCtrlEnable => y-posCtrl.enable
net posCtrlEnable => z-posCtrl.enable
sets posCtrlEnable 1

# x axis
#===========================================================
net x-posCmd => x-posCtrl.command
net x-posFbk => x-posCtrl.feedback
#net x-velCmd <= x-posCtrl.output

setp x-posCtrl.Pgain 5 # Proportional gain
setp x-posCtrl.Igain 0 # Integral gain
setp x-posCtrl.Dgain 0 # Derivative gain
setp x-posCtrl.bias 0 # Constant offset on output
setp x-posCtrl.FF0 0 # Zeroth order feedforward - output proportional to command (position).
setp x-posCtrl.FF1 0.95 # First order feedforward - output proportional to derivative of command (velocity).
setp x-posCtrl.FF2 0 # Second order feedforward - output proportional to 2nd derivative of command (acceleration).
setp x-posCtrl.FF3 0 # Third order feedforward - output proportional to 3rd derivative of command (jerk).
setp x-posCtrl.deadband 0 # Amount of error that will be ignored
setp x-posCtrl.maxerror 0 # Limit on error
setp x-posCtrl.maxerrorI 0 # Limit on error integrator
setp x-posCtrl.maxerrorD 0 # Limit on error derivative
setp x-posCtrl.maxcmdD 300.0 # Limit on command derivative
setp x-posCtrl.maxcmdDD 500.0 # Limit on command 2nd derivative
setp x-posCtrl.maxcmdDDD 0 # Limit on command 3rd derivative
setp x-posCtrl.maxoutput 330.0 # Limit on output value

#All max* limits are implemented so that if the value of this parameter is zero, there is no limit.

# y axis
#===========================================================
net y-posCmd => y-posCtrl.command
net y-posFbk => y-posCtrl.feedback
#net y-velCmd <= y-posCtrl.output

setp y-posCtrl.Pgain 5 # Proportional gain
setp y-posCtrl.Igain 0 # Integral gain
setp y-posCtrl.Dgain 0 # Derivative gain
setp y-posCtrl.bias 0 # Constant offset on output
setp y-posCtrl.FF0 0 # Zeroth order feedforward - output proportional to command (position).
setp y-posCtrl.FF1 0.95 # First order feedforward - output proportional to derivative of command (velocity).
setp y-posCtrl.FF2 0 # Second order feedforward - output proportional to 2nd derivative of command (acceleration).
setp y-posCtrl.FF3 0 # Third order feedforward - output proportional to 3rd derivative of command (jerk).
setp y-posCtrl.deadband 0 # Amount of error that will be ignored
setp y-posCtrl.maxerror 0 # Limit on error
setp y-posCtrl.maxerrorI 0 # Limit on error integrator
setp y-posCtrl.maxerrorD 0 # Limit on error derivative
setp y-posCtrl.maxcmdD 300.0 # Limit on command derivative
setp y-posCtrl.maxcmdDD 500.0 # Limit on command 2nd derivative
setp y-posCtrl.maxcmdDDD 0 # Limit on command 3rd derivative
setp y-posCtrl.maxoutput 330.0 # Limit on output value

#All max* limits are implemented so that if the value of this parameter is zero, there is no limit.

# z axis
#===========================================================
net z-posCmd => z-posCtrl.command
net z-posFbk => z-posCtrl.feedback
#net z-velCmd <= z-posCtrl.output

setp z-posCtrl.Pgain 5 # Proportional gain
setp z-posCtrl.Igain 0 # Integral gain
setp z-posCtrl.Dgain 0 # Derivative gain
setp z-posCtrl.bias 0 # Constant offset on output
setp z-posCtrl.FF0 0 # Zeroth order feedforward - output proportional to command (position).
setp z-posCtrl.FF1 0.95 # First order feedforward - output proportional to derivative of command (velocity).
setp z-posCtrl.FF2 0 # Second order feedforward - output proportional to 2nd derivative of command (acceleration).
setp z-posCtrl.FF3 0 # Third order feedforward - output proportional to 3rd derivative of command (jerk).
setp z-posCtrl.deadband 0 # Amount of error that will be ignored
setp z-posCtrl.maxerror 0 # Limit on error
setp z-posCtrl.maxerrorI 0 # Limit on error integrator
setp z-posCtrl.maxerrorD 0 # Limit on error derivative
setp z-posCtrl.maxcmdD 300.0 # Limit on command derivative
setp z-posCtrl.maxcmdDD 500.0 # Limit on command 2nd derivative
setp z-posCtrl.maxcmdDDD 0 # Limit on command 3rd derivative
setp z-posCtrl.maxoutput 330.0 # Limit on output value

#All max* limits are implemented so that if the value of this parameter is zero, there is no limit.

# coenet
################################################################################
#setp coenet.pos-scale 3600000
#setp coenet.velo-scale 600000

# x axis
#===========================================================
net x-posCmd => coenet.X-positionCmd
net x-velCmd => coenet.X-velocityCmd

net x-setCurrentPosition => coenet.X-SetCurrentPosition
net x-currentPositionSetting => coenet.X-CurrentPositionSetting

net x-stateFbk <= coenet.X-stateFbk
net x-endingCodeFbk <= coenet.X-endingCodeFbk
net x-posFbk <= coenet.X-positionFbk
net x-velFbk <= coenet.X-velocityFbk
net x-posRef <= coenet.X-positionRef
net x-velRef <= coenet.X-velocityRef
net x-targetReached <= coenet.X-targetReached

net x-driveOperational <= coenet.X-driveOperational
net x-driveReady <= coenet.X-driveReady
net x-driveEnabled <= coenet.X-driveEnabled
net x-driveFault <= coenet.X-driveFault

net x-negativeLimitSwitch <= coenet.X-negativeLimitSwitch
net x-positiveLimitSwitch <= coenet.X-positiveLimitSwitch
net x-homeSwitch <= coenet.X-homeSwitch

net x-negativePositionLimit <= coenet.X-negativePositionLimit
net x-positivePositionLimit <= coenet.X-positivePositionLimit
net x-negativeTorqueLimit <= coenet.X-negativeTorqueLimit
net x-positiveTorqueLimit <= coenet.X-positiveTorqueLimit

# y axis
#===========================================================
net y-posCmd => coenet.Y-positionCmd
net y-velCmd => coenet.Y-velocityCmd

net y-setCurrentPosition => coenet.Y-SetCurrentPosition
net y-currentPositionSetting => coenet.Y-CurrentPositionSetting

net y-stateFbk <= coenet.Y-stateFbk
net y-endingCodeFbk <= coenet.Y-endingCodeFbk
net y-posFbk <= coenet.Y-positionFbk
net y-velFbk <= coenet.Y-velocityFbk
net y-posRef <= coenet.Y-positionRef
net y-velRef <= coenet.Y-velocityRef
net y-targetReached <= coenet.Y-targetReached

net y-driveOperational <= coenet.Y-driveOperational
net y-driveReady <= coenet.Y-driveReady
net y-driveEnabled <= coenet.Y-driveEnabled
net y-driveFault <= coenet.Y-driveFault

net y-negativeLimitSwitch <= coenet.Y-negativeLimitSwitch
net y-positiveLimitSwitch <= coenet.Y-positiveLimitSwitch
net y-homeSwitch <= coenet.Y-homeSwitch

net y-negativePositionLimit <= coenet.Y-negativePositionLimit
net y-positivePositionLimit <= coenet.Y-positivePositionLimit
net y-negativeTorqueLimit <= coenet.Y-negativeTorqueLimit
net y-positiveTorqueLimit <= coenet.Y-positiveTorqueLimit

# z axis
#===========================================================
net z-posCmd => coenet.Z-positionCmd
net z-velCmd => coenet.Z-velocityCmd

net z-setCurrentPosition => coenet.Z-SetCurrentPosition
net z-currentPositionSetting => coenet.Z-CurrentPositionSetting

net z-stateFbk <= coenet.Z-stateFbk
net z-endingCodeFbk <= coenet.Z-endingCodeFbk
net z-posFbk <= coenet.Z-positionFbk
net z-velFbk <= coenet.Z-velocityFbk
net z-posRef <= coenet.Z-positionRef
net z-velRef <= coenet.Z-velocityRef
net z-targetReached <= coenet.Z-targetReached

net z-driveOperational <= coenet.Z-driveOperational
net z-driveReady <= coenet.Z-driveReady
net z-driveEnabled <= coenet.Z-driveEnabled
net z-driveFault <= coenet.Z-driveFault

net z-negativeLimitSwitch <= coenet.Z-negativeLimitSwitch
net z-positiveLimitSwitch <= coenet.Z-positiveLimitSwitch
net z-homeSwitch <= coenet.Z-homeSwitch

net z-negativePositionLimit <= coenet.Z-negativePositionLimit
net z-positivePositionLimit <= coenet.Z-positivePositionLimit
net z-negativeTorqueLimit <= coenet.Z-negativeTorqueLimit
net z-positiveTorqueLimit <= coenet.Z-positiveTorqueLimit

#########################################################################
net my_custom_parameter parport.0.mycustomsection-custom_parameter


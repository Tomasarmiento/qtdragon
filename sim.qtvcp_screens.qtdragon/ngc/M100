#!/usr/bin/python
user=""
title="MOLTECH"

import sys
import ConfigParser
import Tkinter as tk



def center_window(window):
    screen_width = window.winfo_screenwidth()
    screen_height = window.winfo_screenheight()
    
    x = (screen_width - window.winfo_reqwidth()) / 2
    y = (screen_height - window.winfo_reqheight()) / 2
    
    window.geometry("1000x2000+%d+%d" % (x, y))

def maximize_window():
    window.attributes('-fullscreen', not window.attributes('-fullscreen'))

P=sys.argv[1]

#The following allows running from a terminal or from Linuxcnc which adds .000000 to the P parameter
if len(P)<7:
	ps=P
else:
	ps=P[0:len(P)-7]

cfg = ConfigParser.ConfigParser()

cfg.read("/usr/share/qtvcp/screens/qtdragon/sim.qtvcp_screens.qtdragon/ngc/Messages.ini")	

instruction = cfg.get("Messages", ps)

window = tk.Tk()

window.title(title)
center_window(window)
window.attributes('-fullscreen', True)

# boton para maximizar la ventana emergente
maximize_button = tk.Button(window, text="Maximizar", command=maximize_window)
maximize_button.pack(side=tk.TOP, padx=10)

msg = tk.Message(window, text = instruction,width=1000)
msg.config(bg="White", fg="Red", font=("times", 40, "bold"))

#pressing the [Esc] key is the same as clicking Continue
def close(event):
	exit(1)
window.bind("<Escape>",close)

#pressing the [Return] key is the same as clicking Continue
def go_on(event):
	exit(0)
window.bind("<Return>",go_on)

#handles clicking on the Continue button
def Continue_clicked():
	exit(0)

btnContinue = tk.Button(window,text="Continue     [Enter]",command=Continue_clicked,width=60,height=2,font=("Helvetica", "40"))
btnContinue.configure(bg = "green")

#handles clicking on the Stop button
def Stop_clicked():
	exit(1)

btnStop = tk.Button(window,text="Stop Executing     [Esc]",command=Stop_clicked,width=60,height=2,font=("Helvetica", "40"))
btnStop.configure(bg = "red")

msg.pack()
btnContinue.pack()
btnStop.pack()

window.mainloop()
